import 'package:opti_app/data/data_sources/cart_item_remote_datasource.dart';

import '../../domain/entities/Cart_item.dart';

abstract class CartItemRepository {
  Future<CartItem> createCartItem({
    required String userId,
    required String productId,
    required int quantity,
    required double totalPrice,
  });
  Future<List<CartItem>> getCartItems(String userId);
  Future<CartItem> updateCartItem(String id, int quantity, double totalPrice);
  Future<void> deleteCartItem(String id);
  Future<void> clearCartItems(String userId);
}

class CartItemRepositoryImpl implements CartItemRepository {
  final CartItemDataSource dataSource;

  CartItemRepositoryImpl({required this.dataSource});

  @override
  Future<CartItem> createCartItem({
    required String userId,
    required String productId,
    required int quantity,
    required double totalPrice,
  }) async {
    final cartItem = CartItem(
      id: '', // Will be generated by backend
      userId: userId,
      productId: productId,
      quantity: quantity,
      totalPrice: totalPrice,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
    return await dataSource.createCartItem(cartItem);
  }

  @override
  Future<List<CartItem>> getCartItems(String userId) async {
    return await dataSource.getCartItems(userId);
  }

  @override
  Future<CartItem> updateCartItem(
      String id, int quantity, double totalPrice) async {
    return await dataSource.updateCartItem(id, quantity, totalPrice);
  }

  @override
  Future<void> deleteCartItem(String id) async {
    await dataSource.deleteCartItem(id);
  }

  @override
  Future<void> clearCartItems(String userId) async {
    await dataSource.deleteCartItem(userId);
  }
}
